name: Plugin Test and Publish

on:
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  pull_request_target:
    types: [closed]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    name: check
    # do not run on forked PRs, do not run on not related issues, do not run on pr comments
    # This condition now checks for three things:
    # 1. Was the event a new or reopened issue?
    # 2. Was the event a comment containing '/retest'?
    # 3. And crucially, was this comment NOT on a pull request?
    if: |
      (
        github.event_name == 'issues' &&
        (github.event.action == 'opened' || github.event.action == 'reopened')
      ) ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '/retest') &&
        !github.event.issue.pull_request &&
        (
          github.event.comment.user.login == github.event.issue.user.login ||
          contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
        )
      )
    steps:
      - run: echo "Check passed"

  plugin_test:
    name: Run Plugin Test
    runs-on: ubuntu-latest
    permissions:
      issues: read
    needs: check
    outputs:
      plugin_name: ${{ steps.plugin-test.outputs.plugin_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Muicebot
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        run: |
          git clone -b main https://github.com/Moemu/Muicebot.git
          cd Muicebot
          mkdir plugins
          python -m pip install --user pipx pdm
          pdm config python.use_venv false
          pdm install --frozen-lockfile --group dev
          python -m pipx ensurepath
          pipx install nb-cli
          python -m pip install "nonebot-plugin-orm[sqlite]" nonebot-adapter-onebot
          pipx run nb-cli orm upgrade

      - name: Run Test
        id: plugin-test
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        run: |
          cd ..
          python plugin_test.py

  create_pr:
    needs: plugin_test
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event_name, 'pull_request') }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Generate App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Setup Git
        run: |
          git config user.name "MuiceAI[bot]"
          git config user.email "1405895+MuiceAI[bot]@users.noreply.github.com"

      - name: Create Pull Request
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: 'Plugin: ${{ needs.plugin_test.outputs.plugin_name }}'
          branch: plugin/add-${{ github.event.issue.number }}
          delete-branch: true
          title: '[Plugin] ${{ needs.plugin_test.outputs.plugin_name }}'
          body: 'resolve #${{ github.event.issue.number }}'
          labels: Plugin
          draft: false

  close_issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.pull_request.body.match(/#(\d+)/)?.[1];
            if (!issueNumber) {
              core.setFailed("No issue number found in PR body.");
            } else {
              await github.rest.issues.update({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "closed"
              });
            }